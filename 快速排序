int GetMidNum(DataType* a, int left, int right)
{
	assert(a);
	int mid = left + ((right - left) >> 1);
	if (a[left] < a[mid])
	{
		if (a[mid]>a[left])
			return mid;
		else if (a[left] < a[right])
			return right;
		else
			return left;
	}
	else
	{
		if (a[mid]>a[right])
			return mid;
		else if (a[right] > a[left])
			return left;
		else
			return right;
	}
}
int PartSort3(DataType* a, int left, int right)//前后指针法
{/*
	int mid = GetMidNum(a, left, right);
	Swap(&a[mid], &a[right]);*/
	int prev = left - 1;
	int cur = left;
	while (cur < right)
	{
		if (a[cur] < a[right] && ++prev != cur)
		{
			Swap(&a[cur], &a[prev]);
		}
		++cur;
	}
	Swap(&a[++prev], &a[right]);
	return prev;
}
int PartSort2(DataType* a, int left, int right)//挖坑法
{
	//int mid = GetMidNum(a, left, right);
	//Swap(&a[mid], &a[right]);
	DataType key = a[right];
	int begin = left;
	int end = right;
	while (begin < end)
	{
		while (begin < end&&a[begin] <= key)
		{
			++begin;
		}
		a[end] = a[begin];
		while (begin < end&&a[end] >= key)
		{
			--end;
		}
		a[begin] = a[end];
	}
	a[begin] = key;
	return begin;
}
int PartSort1(DataType* a, int left, int right)//左右指针法
{
	//int mid = GetMidNum(a, left, right);
	//Swap(&a[mid], &a[right]);
	DataType key = a[right];
	int begin = left, end = right;
	while (begin < end)
	{
		while (begin < end && a[begin] <= key)
		{
			begin++;
		}
		while (begin < end && a[end] >= key)
		{
			end--;
		}
		Swap(&a[begin], &a[end]);
	}
	Swap(&a[begin], &a[right]);
	return begin;
}
void QuickSort(DataType* a, int left, int right)
{
	assert(a);
	if (left >= right)
		return;
	int div = PartSort3(a, left, right);
	QuickSort(a, left, div - 1);
	QuickSort(a, div+1, right);
	
}
void TestQuickSort()
{
	DataType a[] = { 2, 5, 6, 9, 8, 3, 1, 0, 7, 4 };
	QuickSort(a, 0, sizeof(a) / sizeof(DataType)-1);
	PrintfBuff(a, sizeof(a) / sizeof(DataType));
}
